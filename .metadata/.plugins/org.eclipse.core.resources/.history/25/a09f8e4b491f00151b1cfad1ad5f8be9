package be.uantwerpen.tacle.tasksetgenerator;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.*;

public class SetsGenerator {

	/*
	 * @param: osScheduler: de scheduler of the hypervisor
	 * @Param: periodmin,periodmax,periodStep: the uniform distribution of taks period between [periodmax,periodmin] with a step x ms
	 * @Param:setsPerLoad: per load and binomal distribution to generated sets must be generated (min is 1)
	 */
	
	static final String NAME 			= "name";
	static final String LOCATION 		= "tasksetlocation";
	static final String UTIL_MIM 		= "globalUtilizationMin";
	static final String UTIL_MAX 		= "globalUtilizationMax";
	static final String UTIL_STEP 		= "utilizationStep";
	static final String NUM_TASKS 		= "numberOfTasks";
	static final String NUM_TASKSETS 	= "numberOfTaskSets";
	static final String PERIOD_MIN 		= "periodMin";
	static final String PERIOD_MAX 		= "periodMax";
	static final String PERIOD_STEP 	= "periodStep";
	static final String SEED 			= "seed";

	
	private List<Task> taskset;
	private Map<String, List<String>> params;
	
	public SetsGenerator (){
		
	}
	
	public void generateTaskset()
	{
		int setsperload = Integer.parseInt(params.get(NUM_TASKSETS).get(0));
		String fileName = params.get(NAME).get(0);
		double minLoad =  Double.parseDouble(params.get(UTIL_MIM).get(0));
		double maxLoad = Double.parseDouble(params.get(UTIL_MAX).get(0));
		double stepLoad = Double.parseDouble(params.get(UTIL_STEP).get(0));
		int minPeriod = Integer.parseInt(params.get(PERIOD_MIN).get(0));
		int maxPeriod = Integer.parseInt(params.get(PERIOD_MAX).get(0));
		int stepPeriod = Integer.parseInt(params.get(PERIOD_STEP).get(0));
		
		for(double load=minLoad;load<=maxLoad;load+=stepLoad)
		{
			for(int i=1;i<2;i++)
			{
				
				for(int j=0;j<setsperload;j++)
				{
					fileName = fileName+"_"+new Double(Math.round(100*load)).toString()+"_";
					/*if(i==1)//light 8/9 and 1/9
					{
						fileName += "light_"+j+".xml";
					}
					if(i==2) //medium 6/9 and 3/9
					{
						fileName += "medium_"+j+".xml";
					}
					if(i==3)//medium 5/9 and 4/9
					{
						fileName += "heavy_"+j+".xml";
					}*/
					fileName=fileName+j+".xml";
					createTasks(minPeriod,maxPeriod, stepPeriod ,load,i);
					XMLgenerator(fileName,"test",i);
					//System.out.println(fileName);
				}
			}
		}
	}
	
	public void createTasks(double periodmin, double periodmax, double periodStep, double tasksetUtil, int binomal)
	{
		Random random = new Random();
		Random random1 = new Random();
		Random random2 = new Random();
		double period=0,exec;
		double taskUtil=0;
		double tempUtil;
		double chooser;
		//int j=0;
		Task task = null;
		taskset = new ArrayList<Task>();
		if(binomal<1 || binomal >3 )
		{
			System.out.println("1=light, 2=medium and 3=heavy!!!");
			System.exit(0);
		}
		
		while(this.getTasksetUtil() <= tasksetUtil)
		{
			
			if(binomal==1)//light 8/9 and 1/9
			{
				chooser = random2.nextDouble() * (9  - 0) + 0; 
				if(chooser <= 8) 
					taskUtil = random1.nextDouble()*(0.5 - 0.001) + 0.001;
				else //if(chooser > 8 && chooser <=9 ) 
					taskUtil = random1.nextDouble() * (0.9 - 0.5) + 0.5;
			}
			if(binomal==2) //medium 6/9 and 3/9
			{
				chooser = random2.nextDouble() * (9  - 0) + 0; 
				if(chooser <= 6) 
					taskUtil = random1.nextDouble()*(0.5 - 0.001) + 0.001;
				else //if(chooser > 8 && chooser <=9 ) 
					taskUtil = random1.nextDouble() * (0.9 - 0.5) + 0.5;
			}
			if(binomal==3)//medium 5/9 and 4/9
			{
				chooser = random2.nextDouble() * (9  - 0) + 0; 
				if(chooser <= 5) 
					taskUtil = random1.nextDouble()*(0.5 - 0.001) + 0.001;
				else //if(chooser > 8 && chooser <=9 ) 
					taskUtil = random1.nextDouble() * (0.9 - 0.5) + 0.5;
			}
			
			period = (int)(Math.round((random.nextDouble()*(periodmax/periodStep-periodmin/periodStep)+periodmin/periodStep))*periodStep);
			exec = (int)Math.round(taskUtil*period);
			tempUtil = exec/period;
			
			if(tempUtil<0.001||tempUtil>0.9)
			{
				continue;
			}
			//j++;
			task = new Task();
			task.setExe(exec);
			task.setPeriod(period);
			task.setDeadline(period);
			task.setName("Task "+(taskset.size()+1));
			if(this.getTasksetUtil()+tempUtil>tasksetUtil)
				break;
			taskset.add(task);
		}
		task.setExe((int)Math.round((tasksetUtil-this.getTasksetUtil())*period));
		taskset.add(task); 
	}
	private double getTasksetUtil()
	{
		if(taskset.isEmpty())
			return 0;
		double util=0;
		for(Task t:taskset)
			util+=t.getExe()/t.getPeriod();
		return util;
	}
	public void XMLgenerator(String fileName,String osScheduler,int binomal)
	{
		String resultString = "<system os_scheduler=\""+osScheduler+"\" period=\"10.0\">\n";
		PrintWriter writer = null;
		int VMs;
		int i=0;
		
		if(taskset.size()<4)
			VMs = taskset.size()%4;
		else
			VMs = 4;
		try {
			writer = new PrintWriter(fileName);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		String[] components = new String[VMs];
		double[] loadPerVm = new double[VMs];
		for(int j=0;j<VMs;j++)
		{
			loadPerVm[j]=0;
			components[j] = "";
		}
		for(Task t: taskset)
		{
			i=bestbin(loadPerVm);
			components[i]= components[i]+"<task name=\""+t.getName()+"\" p=\""+t.getPeriod()+"\" d=\""+t.getDeadline()+"\" e=\""+t.getExe()+"\" />\n";
			loadPerVm[i]+=t.getExe()/t.getPeriod();
			/*i++;
			if(i==VMs)
				i=0;*/
		}
		for(int j=0;j<VMs;j++)
		{
			components[j]="<component scheduler=\"gEDF\" name=\"VM"+(j+1)+"\" period=\""+20+"\" u=\""+loadPerVm[j]+"\""
					+ " period_min=\"350\" period_max=\"800\">\n" +components[j] + 
					"</component>\n";
			resultString += components[j];
			
		}
		resultString +=  "</system>\n";
		writer.print(resultString);
		writer.close();
		
	}
	private int bestbin(double[] loads)
	{
		double bestload=10;
		int VM=0;
		for(int i=0;i<loads.length;i++)
		{
			if(loads[i]<bestload)
			{
				bestload=loads[i];
				VM=i;
			}
		}
		return VM;
	}
	private void checkInput(String fileName)
	{
		XMLParser parser = new XMLParser(fileName);
		boolean check=true;
		parser.parseFile();
		params = parser.getParameters("TaskSet");
		//check if all parameters are included
		if(!params.containsKey(LOCATION))
			check = false;
		if(!params.containsKey(UTIL_MIM))
			check = false;
		if(!params.containsKey(UTIL_MAX))
			check = false;
		if(!params.containsKey(UTIL_STEP))
			check = false;
		if(!params.containsKey(NUM_TASKS))
			check = false;
		if(!params.containsKey(NUM_TASKSETS))
			check = false;
		if(!params.containsKey(PERIOD_MIN))
			check = false;
		if(!params.containsKey(PERIOD_MAX))
			check = false;
		if(!params.containsKey(PERIOD_STEP))
			check = false;
		if(!params.containsKey(SEED))
			check = false;
		if(!check)
		{
			System.err.println("Some parameters are missing");
		}
	}
	
	public static void main(String[] args) {
			
		SetsGenerator gen = new SetsGenerator();
		gen.checkInput("user.xml");
		gen.generateTaskset();
	}
}
